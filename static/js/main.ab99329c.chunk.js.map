{"version":3,"sources":["components/DogCard.js","App.js","reportWebVitals.js","index.js"],"names":["DogCard","props","className","data","images","src","name","parseFloat","distance","toFixed","city","country","onClick","setButtonSelected","id","App","useState","error","setError","isLoaded","setIsLoaded","items","setItems","postcodecity","encodeURIComponent","datam","url","toLowerCase","postcodeCity","replace","window","location","href","useEffect","fetch","then","res","json","result","console","log","parks","message","map","item","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KA8BeA,EA5BC,SAACC,GAOT,OACI,sBAAKC,UAAU,UAAf,UACI,qBAAKA,UAAU,UAAf,SACCD,EAAME,KAAKC,OAAO,GAAI,qBAAKC,IAAKJ,EAAME,KAAKC,OAAO,KAAS,qBAAKC,IAR1D,mFAUP,qBAAKH,UAAU,YAAf,SACKD,EAAME,KAAKG,OAEhB,sBAAKJ,UAAU,iBAAf,UACI,gCAAMK,WAAWN,EAAME,KAAKK,UAAUC,QAAQ,GAA9C,cACA,8BAAMR,EAAME,KAAKO,KAAK,KAAKT,EAAME,KAAKQ,aAE1C,qBAAKT,UAAU,iBAAiBU,QAfzB,WACfX,EAAMY,kBAAkBZ,EAAME,OActB,SACI,4CAAWF,EAAME,KAAKW,UCkC3BC,MArDf,WACE,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACMC,EAAcC,mBAAmB,iBACjCb,EAASa,mBAAmB,MAC5BX,EAAkB,SAACY,GACvB,IAAIC,EAAI,2BAMR,OALAA,GAAKD,EAAMd,QAAQgB,cAAc,mBACjCD,GAAKD,EAAMG,aAAaC,QAAQ,IAAI,KAAK,IACzCH,GAAKD,EAAMnB,KAAKuB,QAAQ,IAAI,KAAK,IAAIJ,EAAMX,GAAG,IAC9CgB,OAAOC,SAASC,KAAKN,EAEdD,GAqBT,OAlBAQ,qBAAU,WACRC,MAAM,iEAAD,OAAkEX,EAAlE,oBAA0FZ,IAC9FwB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACClB,GAAY,GACZmB,QAAQC,IAAIF,EAAOG,OACnBnB,EAASgB,EAAOG,UAElB,SAACxB,GACCG,GAAY,GACZF,EAASD,QAGZ,IAIAA,EACM,0CAAaA,EAAMyB,WACjBvB,EAIP,gCACA,qBAAKjB,UAAU,WACf,qBAAKA,UAAU,WAAf,SACGmB,EAAMsB,KAAI,SAAAC,GAAI,OACb,cAAC,EAAD,CAAS/B,kBAAmBA,EAAiCV,KAAMyC,GAAfA,EAAK9B,YAPxD,gCAAK,qBAAKZ,UAAU,WAAe,qBAAKA,UAAU,UAAf,4BC5B/B2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.ab99329c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DogCard = (props) => {\r\n\r\n    const defaultSrc = 'https://functions.dogorama-services.com/getStaticAsset?name=park_placeholder';\r\n\r\n    const buttonSetter=()=>{\r\n        props.setButtonSelected(props.data)\r\n    };\r\n        return (\r\n            <div className=\"dogCard\">\r\n                <div className=\"cardImg\">\r\n                {props.data.images[0]? <img src={props.data.images[0]} /> : <img src={defaultSrc} />}\r\n                </div>\r\n                <div className=\"cardTitle\">\r\n                    {props.data.name}\r\n                </div>\r\n                <div className=\"cardAdditional\">\r\n                    <div>{parseFloat(props.data.distance).toFixed(2)} km away</div>\r\n                    <div>{props.data.city+\", \"+props.data.country}</div>\r\n                </div>\r\n                <div className=\"cardButtonPart\" onClick={buttonSetter}>\r\n                    <span key={props.data.id}>More Info</span>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n  \r\n}\r\n\r\nexport default DogCard;\r\n","import { useState, useEffect } from \"react\";\nimport DogCard from \"./components/DogCard\";\n\nfunction App() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const postcodecity= encodeURIComponent(\"04109 Leipzig\");\n  const country= encodeURIComponent(\"DE\");\n  const setButtonSelected=(datam)=>{\n    let url=\"https://dogorama.app/de-\";\n    url+=datam.country.toLowerCase()+\"/auslaufgebiete/\";\n    url+=datam.postcodeCity.replace(\" \",\"_\")+\"/\";\n    url+=datam.name.replace(\" \",\"_\")+\"-\"+datam.id+\"/\";\n    window.location.href=url;\n   \n    return datam;\n  };\n \n  useEffect(() => {\n    fetch(`https://functions.dogorama-services.com/getParks?postcodecity=${postcodecity}&country=${country}`)\n    .then(res => res.json())\n    .then(\n      (result)=>{\n        setIsLoaded(true);\n        console.log(result.parks);\n        setItems(result.parks);\n      },\n      (error) => {\n        setIsLoaded(true);\n        setError(error);\n      }\n    )\n  }, [])\n  \n  \n  //console.log(items[5]);\n  if(error){\n    return <div>Error: {error.message}</div>;\n  } else if(!isLoaded){\n    return <div><div className=\"header\"></div><div className=\"loading\">Loading...</div></div>;\n  }else{\n    return(\n      <div>\n      <div className=\"header\"></div>\n      <div className=\"cardList\">\n        {items.map(item => (\n          <DogCard setButtonSelected={setButtonSelected} key={item.id} data={item}/>\n        ))}\n      </div> \n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}